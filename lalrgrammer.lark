 ?start: value | blockbody

    ?value: object
          | array
          | string
          | SIGNED_NUMBER      -> number
          | "true"             -> true
          | "false"            -> false
          | "null"             -> null
          
          //| methods
          //| expression
          //| group
          //| statement
          //| ifcondition
          //| elifcondition
          //| elsecondition
          //| conditionstatement
          //| ternarystatement
          //| blockbody
          //| assignment
          //| varname
    number: SIGNED_NUMBER
    array  : "[" [value ("," value)*] "]"
    object : "{" [pair ("," pair)*] "}"
    pair   : string ":" value

    string : ESCAPED_STRING
    val: ".Value."
    extension: val ("lower" | "upper" | "int" | "bool" | "length")
    prop: "Prop(" string ")" extension?
    lookup: "Lookup(" string ")"
    methods: (prop | lookup | len)
    len: "Len(" (string | methods) ")"
    ANDCONDITION: "AND"
    ORCONDITION: "OR"
    condition: ANDCONDITION | ORCONDITION
    eq: "=="
    ternary: "?"
    colon: ":"
    operator: eq | ternary | colon
    leftexpression: ESCAPED_STRING | number | methods
    expressionvalue: ESCAPED_STRING | SIGNED_NUMBER | methods
    //expression : (leftexpression | group) operator (expressionvalue | group | ternarystatement)
    expression : (leftexpression | group) operator (expressionvalue | group)
    groupstart: "("
    groupend: ")"
    //group: "(" (groupstart)* (expression | ternarystatement) [condition (expression | group)]* (groupend)* ")"
    //group: "(" (groupstart)* expression [condition (expression | group)]* (groupend)* ")"
    group: "(" expression (condition (expression | group))* ")"
    statement: (group | expression) (condition (group | expression))*
    ifcondition: "if" (group | expression) "{" (blockbody)* "}"
    elifcondition: "elif" statement "{" (blockbody)* "}"
    elsecondition: "else" "{" (blockbody)* "}"
    conditionstatement: ifcondition (elifcondition)* (elsecondition)?
    ternarystatement: statement "?" (methods | expressionvalue) ":" (methods | expressionvalue)
    assignment: var "=" (string | number | methods | group | expression)* ";"
    //blockbody: (assignment)* (ternarystatement)* (conditionstatement)*
    conditionblock: ifcondition elifcondition? elsecondition?
    blockbody: (statement | assignment | conditionblock)*
    VARNAME: /[0-9a-zA-Z]/+
    var: "var" VARNAME

    %import common.ESCAPED_STRING
    %import common.SIGNED_NUMBER
    %import common.WS

    %ignore WS
